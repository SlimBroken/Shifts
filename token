<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Token Debugger</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .input-group {
            margin: 20px 0;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        button {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #0056b3;
        }
        .result {
            margin: 20px 0;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        .success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .info {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
        }
        .step {
            background: #e9ecef;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
            border-left: 4px solid #007bff;
        }
        .warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç GitHub Token Debugger</h1>
        <p>This tool will help you debug your GitHub token issues step by step.</p>
        
        <div class="warning">
            <strong>‚ö†Ô∏è Security Note:</strong> This tool runs in your browser only. Your token is never sent to any external server except GitHub's API for testing.
        </div>

        <div class="input-group">
            <label for="token">GitHub Personal Access Token:</label>
            <input type="password" id="token" placeholder="ghp_abc123..." />
            <small>Enter your GitHub Personal Access Token</small>
        </div>

        <div class="input-group">
            <label for="gistId">Gist ID:</label>
            <input type="text" id="gistId" value="ea6ff1d66881230e1bb163d3264423aa" />
            <small>Your public gist ID</small>
        </div>

        <div>
            <button onclick="testBasicAuth()">1. Test Basic Auth</button>
            <button onclick="testUserInfo()">2. Test User Info</button>
            <button onclick="testGistAccess()">3. Test Gist Access</button>
            <button onclick="testGistWrite()">4. Test Gist Write</button>
            <button onclick="runAllTests()">üîÑ Run All Tests</button>
        </div>

        <div id="results"></div>

        <div class="step">
            <h3>üìã How to create a proper GitHub token:</h3>
            <ol>
                <li>Go to <a href="https://github.com/settings/tokens" target="_blank">GitHub Personal Access Tokens</a></li>
                <li>Click "Generate new token" ‚Üí "Generate new token (classic)"</li>
                <li>Give it a name like "Shift Scheduler"</li>
                <li>Set expiration to "No expiration" or "1 year"</li>
                <li><strong>Select scopes: Check ONLY "gist"</strong> - this is crucial!</li>
                <li>Click "Generate token"</li>
                <li>Copy the token immediately (you won't see it again)</li>
            </ol>
        </div>

        <div class="step">
            <h3>üîß Common issues and solutions:</h3>
            <ul>
                <li><strong>Wrong scopes:</strong> Token must have "gist" scope</li>
                <li><strong>Expired token:</strong> Check expiration date on GitHub</li>
                <li><strong>Typo in token:</strong> Copy-paste carefully, no extra spaces</li>
                <li><strong>Token format:</strong> Should start with "ghp_" for personal tokens</li>
                <li><strong>Account issues:</strong> Make sure you're logged into the right GitHub account</li>
            </ul>
        </div>
    </div>

    <script>
        function showResult(message, type) {
            const resultsDiv = document.getElementById('results');
            const resultDiv = document.createElement('div');
            resultDiv.className = `result ${type}`;
            resultDiv.textContent = message;
            resultsDiv.appendChild(resultDiv);
        }

        function clearResults() {
            document.getElementById('results').innerHTML = '';
        }

        async function testBasicAuth() {
            clearResults();
            const token = document.getElementById('token').value.trim();
            
            if (!token) {
                showResult('‚ùå Please enter a token first', 'error');
                return;
            }

            if (!token.startsWith('ghp_') && !token.startsWith('github_pat_')) {
                showResult('‚ö†Ô∏è Warning: Token should start with "ghp_" or "github_pat_"', 'error');
            }

            showResult('üîÑ Testing basic authentication...', 'info');

            try {
                const response = await fetch('https://api.github.com/user', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'User-Agent': 'ShiftScheduler/1.0'
                    }
                });

                if (response.ok) {
                    const user = await response.json();
                    showResult(`‚úÖ Basic auth SUCCESS!\nUser: ${user.login}\nName: ${user.name || 'Not set'}\nPublic repos: ${user.public_repos}`, 'success');
                    return true;
                } else {
                    const error = await response.json();
                    showResult(`‚ùå Basic auth FAILED!\nStatus: ${response.status}\nError: ${error.message}\nDocs: ${error.documentation_url || 'N/A'}`, 'error');
                    return false;
                }
            } catch (error) {
                showResult(`‚ùå Network error: ${error.message}`, 'error');
                return false;
            }
        }

        async function testUserInfo() {
            const token = document.getElementById('token').value.trim();
            
            if (!token) {
                showResult('‚ùå Please enter a token first', 'error');
                return;
            }

            showResult('üîÑ Testing user information access...', 'info');

            try {
                const response = await fetch('https://api.github.com/user', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (response.ok) {
                    const user = await response.json();
                    showResult(`‚úÖ User info SUCCESS!\nID: ${user.id}\nLogin: ${user.login}\nType: ${user.type}\nPlan: ${user.plan?.name || 'Unknown'}`, 'success');
                    
                    // Test rate limits
                    const rateLimit = response.headers.get('X-RateLimit-Limit');
                    const remaining = response.headers.get('X-RateLimit-Remaining');
                    showResult(`üìä Rate limits: ${remaining}/${rateLimit} remaining`, 'info');
                    
                    return true;
                } else {
                    const error = await response.json();
                    showResult(`‚ùå User info FAILED!\nStatus: ${response.status}\nMessage: ${error.message}`, 'error');
                    return false;
                }
            } catch (error) {
                showResult(`‚ùå Network error: ${error.message}`, 'error');
                return false;
            }
        }

        async function testGistAccess() {
            const token = document.getElementById('token').value.trim();
            const gistId = document.getElementById('gistId').value.trim();
            
            if (!token || !gistId) {
                showResult('‚ùå Please enter both token and gist ID', 'error');
                return;
            }

            showResult('üîÑ Testing gist read access...', 'info');

            try {
                const response = await fetch(`https://api.github.com/gists/${gistId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (response.ok) {
                    const gist = await response.json();
                    const files = Object.keys(gist.files);
                    showResult(`‚úÖ Gist read SUCCESS!\nGist ID: ${gist.id}\nPublic: ${gist.public}\nFiles: ${files.join(', ')}\nOwner: ${gist.owner?.login || 'Anonymous'}\nCreated: ${new Date(gist.created_at).toLocaleString()}`, 'success');
                    return true;
                } else {
                    const error = await response.json();
                    showResult(`‚ùå Gist read FAILED!\nStatus: ${response.status}\nMessage: ${error.message}`, 'error');
                    
                    if (response.status === 404) {
                        showResult(`üí° Tip: Status 404 might mean:\n- Gist ID is wrong\n- Gist is private and you don't have access\n- Gist doesn't exist`, 'info');
                    }
                    return false;
                }
            } catch (error) {
                showResult(`‚ùå Network error: ${error.message}`, 'error');
                return false;
            }
        }

        async function testGistWrite() {
            const token = document.getElementById('token').value.trim();
            const gistId = document.getElementById('gistId').value.trim();
            
            if (!token || !gistId) {
                showResult('‚ùå Please enter both token and gist ID', 'error');
                return;
            }

            showResult('üîÑ Testing gist write access...', 'info');

            try {
                const testData = {
                    test_timestamp: Date.now(),
                    test_message: 'Token test from debugger'
                };

                const response = await fetch(`https://api.github.com/gists/${gistId}`, {
                    method: 'PATCH',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                        files: {
                            'test_file.json': {
                                content: JSON.stringify(testData, null, 2)
                            }
                        }
                    })
                });

                if (response.ok) {
                    const gist = await response.json();
                    showResult(`‚úÖ Gist write SUCCESS!\nUpdated: ${new Date(gist.updated_at).toLocaleString()}\nFiles: ${Object.keys(gist.files).join(', ')}`, 'success');
                    
                    // Clean up test file
                    setTimeout(async () => {
                        try {
                            await fetch(`https://api.github.com/gists/${gistId}`, {
                                method: 'PATCH',
                                headers: {
                                    'Authorization': `Bearer ${token}`,
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/vnd.github.v3+json'
                                },
                                body: JSON.stringify({
                                    files: {
                                        'test_file.json': null // Delete the test file
                                    }
                                })
                            });
                            showResult('üßπ Test file cleaned up', 'info');
                        } catch (e) {
                            showResult('‚ö†Ô∏è Could not clean up test file (not critical)', 'info');
                        }
                    }, 2000);
                    
                    return true;
                } else {
                    const error = await response.json();
                    showResult(`‚ùå Gist write FAILED!\nStatus: ${response.status}\nMessage: ${error.message}`, 'error');
                    
                    if (response.status === 403) {
                        showResult(`üí° Tip: Status 403 might mean:\n- Token doesn't have 'gist' scope\n- You don't own this gist\n- Rate limit exceeded`, 'info');
                    }
                    return false;
                }
            } catch (error) {
                showResult(`‚ùå Network error: ${error.message}`, 'error');
                return false;
            }
        }

        async function runAllTests() {
            clearResults();
            showResult('üöÄ Running comprehensive token tests...', 'info');
            
            const test1 = await testBasicAuth();
            if (!test1) {
                showResult('‚ùå Stopping tests - basic auth failed', 'error');
                return;
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000)); // Small delay
            
            const test2 = await testUserInfo();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const test3 = await testGistAccess();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const test4 = await testGistWrite();
            
            if (test1 && test2 && test3 && test4) {
                showResult('üéâ ALL TESTS PASSED!\nYour token is working correctly. The issue might be in your admin.html code.', 'success');
                showResult('üí° Next steps:\n1. Copy your working token\n2. Update admin.html line ~270\n3. Make sure no extra spaces or characters\n4. Save and refresh the page', 'info');
            } else {
                showResult('‚ùå Some tests failed. Please create a new token with proper "gist" scope.', 'error');
            }
        }

        // Auto-test if URL has token parameter (for quick testing)
        const urlParams = new URLSearchParams(window.location.search);
        const urlToken = urlParams.get('token');
        if (urlToken) {
            document.getElementById('token').value = urlToken;
            runAllTests();
        }
    </script>
</body>
</html>
